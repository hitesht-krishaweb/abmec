/*!
 * Bootstrap Grid v4.3.1 (https://getbootstrap.com/)
 * Copyright 2011-2019 The Bootstrap Authors
 * Copyright 2011-2019 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints, $gutter: $gutters) {

    // Common properties for all breakpoints
    %grid-column {
        position: relative;
        width: 100%;

        @each $breakpoint, $gutter in $gutters {
            @include media-breakpoint-up($breakpoint, $breakpoints) {
                padding-right: $gutter / 2;
                padding-left: $gutter / 2;
            }
        }
    }

    @each $breakpoint in map-keys($breakpoints) {
        $infix: breakpoint-infix($breakpoint, $breakpoints);

        // Allow columns to stretch full width below their breakpoints
        @for $i from 1 through $columns {
            .col#{$infix}-#{$i} {
                @extend %grid-column;
            }
        }

        .col#{$infix},
        .col#{$infix}-auto {
            @extend %grid-column;
        }

        @include media-breakpoint-up($breakpoint, $breakpoints) {

            // Provide basic `.col-{bp}` classes for equal-width flexbox columns
            .col#{$infix} {
                flex-basis: 0;
                flex-grow: 1;
                max-width: 100%;
            }

            .col#{$infix}-auto {
                flex: 0 0 auto;
                width: auto;
                max-width: 100%; // Reset earlier grid tiers
            }

            @for $i from 1 through $columns {
                .col#{$infix}-#{$i} {
                    @include make-col($i, $columns);
                }
            }

            .order#{$infix}-first {
                order: -1;
            }

            .order#{$infix}-last {
                order: $columns + 1;
            }

            @for $i from 0 through $columns {
                .order#{$infix}-#{$i} {
                    order: $i;
                }
            }

            // `$columns - 1` because offsetting by the width of an entire row isn't possible
            @for $i from 0 through ($columns - 1) {
                @if not($infix == ""and $i == 0) {

                    // Avoid emitting useless .offset-0
                    .offset#{$infix}-#{$i} {
                        @include make-col-offset($i, $columns);
                    }
                }
            }
        }
    }
}

// Create custom container offset
@mixin make-container($breakpoints: $grid-breakpoints, $offset: $offsets) {
    width: 100%;
    margin-right: auto;
    margin-left: auto;

    @each $breakpoint, $offset in $offsets {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            padding-right: $offset;
            padding-left: $offset;
        }
    }
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
    @each $breakpoint, $container-max-width in $max-widths {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            max-width: $container-max-width;
        }
    }
}

// Create custom container offset
@mixin make-row($breakpoints: $grid-breakpoints, $gutter: $gutters) {
    display: flex;
    flex-wrap: wrap;

    @each $breakpoint, $gutter in $gutters {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            margin-right: -$gutter / 2;
            margin-left: -$gutter / 2;
        }
    }
}

@mixin make-col($size, $columns: $grid-columns) {
    flex: 0 0 percentage($size / $columns);
    // Add a `max-width` to ensure content within each column does not blow out
    // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
    // do not appear to require this.
    max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
    $num: $size / $columns;

    margin-left: if($num==0, 0, percentage($num));
}

/* Custom col function: OFFSET */
@mixin make-col-offset-pull($size, $columns: $grid-columns, $breakpoints: $grid-breakpoints, $gutter: $gutters) {
    $num: $size / $columns;

    @each $breakpoint, $gutter in $gutters {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            margin-left: calc(#{if($num==0, 0, percentage($num))} - (#{$gutter}));
        }
    }
}

@mixin make-col-offset-push($size, $columns: $grid-columns, $breakpoints: $grid-breakpoints, $gutter: $gutters) {
    $num: $size / $columns;

    @each $breakpoint, $gutter in $gutters {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            margin-right: calc(#{if($num==0, 0, percentage($num))} - #{$gutter});
        }
    }
}

/* Custom col function: PULL */
@mixin make-col-pull($size, $columns: $grid-columns, $breakpoints: $grid-breakpoints, $gutter: $gutters) {
    @each $breakpoint, $gutter in $gutters {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            margin-left: -$gutter;
            flex: 0 0 calc(#{percentage($size / $columns)} + #{$gutter});
            max-width: calc(#{percentage($size / $columns)} + #{$gutter});
        }
    }
}

/* Custom col function: PUSH */
@mixin make-col-push($size, $columns: $grid-columns, $breakpoints: $grid-breakpoints, $gutter: $gutters) {
    @each $breakpoint, $gutter in $gutters {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            margin-right: -$gutter;
            flex: 0 0 calc(#{percentage($size / $columns)} + #{$gutter});
            max-width: calc(#{percentage($size / $columns)} + #{$gutter});
        }
    }
}

// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

@if $enable-grid-classes {
    .container {
        @include make-container();

        max-width: $max-width-container;
    }
}

// Row
//
// Rows contain and clear the floats of your columns.

@if $enable-grid-classes {
    .row {
        @include make-row();
    }

    // Remove the negative margin from default .row, then the horizontal padding
    // from all immediate children columns (to prevent runaway style inheritance).
    .no-gutters {
        margin-right: 0;
        margin-left: 0;

        > .col,
        > [class*="col-"] {
            padding-right: 0;
            padding-left: 0;
        }
    }
}

// Columns
//
// Common styles for small and large grid columns

@if $enable-grid-classes {
    @include make-grid-columns();
}
